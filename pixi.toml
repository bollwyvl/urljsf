"$schema" = "https://pixi.sh/v0.31.0/schema/manifest/schema.json"

[project]
name = "urljsf"
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[tasks] # aliases ##############################################################

all = {description = """
run ALL tasks that would lead to a release""", depends-on = [
  "fix",
  "lint",
  "build",
  "dist",
  "test",
  "docs",
], cmd = "echo 🚢"}
fix = {description = """
apply ALL source formatters""", depends-on = [
  "fix-toml-taplo",
  "fix-js-dedupe",
  "fix-js-markdownlint",
  "fix-js-prettier",
  "fix-py-ruff",
], cmd = "echo 🧹"}
lint = {description = """
apply ALL static analysis tools""", depends-on = [
  "lint-actionlint",
  "lint-py-ruff",
  "lint-js-prettier",
  "lint-js-markdownlint",
  "lint-py-mypy",
], cmd = "echo ⭐"}
build = {description = """
build ALL intermediate assets""", depends-on = [
  "build-schema",
  "build-js-demo",
  "build-js-lib",
  "build-js-app",
  "build-py-static",
], cmd = "echo 🏗️"}
build-schema = {description = """
build ALL schema products""", depends-on = [
  "build-schema-props",
  "build-schema-json",
  "build-schema-py",
  "build-schema-ts",
], cmd = "echo 🧩"}
dist = {description = """
build ALL releasable artifacts""", depends-on = [
  "dist-npm",
  "dist-pypi",
  "dist-hash",
], cmd = "echo 📦"}
test = {description = """
run ALL tests""", depends-on = [
  "test-pytest",
  "test-oldest-pytest",
  "test-report",
], cmd = "echo 🧪"}
docs = {description = """
build all documentation""", depends-on = ["docs-sphinx"], cmd = "echo 🖨️"}

# fragments ####################################################################
prettier-- = """yarn prettier
  --list-different
  --cache
  --cache-location build/.cache/prettier
  "*.{yml,json,md}"
  "{docs,tests,src,js,.github}/**/*.{md,json,yml,yaml,css,ts,tsx,ts,mjs}"
"""
markdownlint-- = """yarn markdownlint-cli2 "*.md" "{docs,tests,src,js,.github}/**/*.md"
"""
py-static-- = """rm -rf src/urljsf/_static/
&& cp -r js/dist/urljsf src/urljsf/_static/urljsf
&& cp -r js/schema src/urljsf/_static/schema
&& rm -rf src/urljsf/_static/urljsf/demo/ src/urljsf/_static/schema/*.toml"""
platform-- = '''mkdir -p build
&& python -c '
import platform; u = platform.uname(); print(f"{u.system}-{u.machine}".lower())
' > build/platform.txt'''
pip-e-- = """python -m pip install
  -vv
  -e .
  --no-deps
  --no-build-isolation
  --disable-pip-version-check
  --ignore-installed"""
schema-vars-- = '''echo
  PROPS_TS=$PIXI_PROJECT_ROOT/js/src/_props.ts
  PROPS_JSON=$PIXI_PROJECT_ROOT/js/schema/v0/props.schema.json
  SCHEMA_TOML=$PIXI_PROJECT_ROOT/js/schema/form.schema.toml
  SCHEMA_JSON=$PIXI_PROJECT_ROOT/js/schema/v0/form.schema.json
  SCHEMA_TS=$PIXI_PROJECT_ROOT/js/src/_schema.ts
  SCHEMA_PY=$PIXI_PROJECT_ROOT/src/urljsf/_schema.py'''
schema-ts-json-- = "python scripts/schema.py $PROPS_TS $PROPS_JSON"
schema-toml-json-- = "python scripts/schema.py $SCHEMA_TOML $SCHEMA_JSON $PROPS_JSON"

[feature.tasks-build.tasks]
schema-json-ts-- = "python scripts/schema.py $SCHEMA_JSON $SCHEMA_TS"
schema-json-py-- = """
python scripts/schema.py $SCHEMA_JSON $SCHEMA_PY
"""
schema-all-- = """
pixi r build-schema-props
&& pixi r schema-toml-json--
&& pixi r schema-json-ts--
&& pixi r schema-json-py--
&& echo "OK"
"""

# setup ########################################################################
[feature.tasks-build.tasks.build-yarn]
description = "- install nodejs-based dependencies"
cmd = "yarn"
inputs = ["{yarn.lock,package.json,.yarnrc.yml}", "js/package.json"]
outputs = ["node_modules/.yarn-state.yml"]

[feature.tasks-lint.tasks.lint-pip]
description = "- install an the editable python package for linting"
cmd = "pixi r -e lint pip-e--"
inputs = ["pyproject.toml"]

[feature.tasks-test.tasks.test-pip]
description = "- install an the editable python package for testing"
cmd = "pixi r -e test pip-e--"
inputs = ["pyproject.toml"]

[feature.tasks-test-oldest.tasks.test-min-pip]
description = "- install an the editable python package for testing (oldest)"
cmd = "pixi r -e test-oldest pip-e--"
inputs = ["pyproject.toml"]

[feature.tasks-dev.tasks.dev-pip]
description = "- install an the editable python package for development"
cmd = "pixi r -e dev pip-e--"
inputs = ["pyproject.toml"]

[feature.tasks-docs.tasks.docs-pip]
description = "- install an the editable python package for docs"
cmd = "pixi r -e docs pip-e--"
inputs = ["pyproject.toml"]

# build ########################################################################
[feature.tasks-build.tasks.build-js-demo]
cmd = "python scripts/demo.py"
inputs = ["js/demo/toml/", "scripts/demo.py"]
outputs = ["js/demo/{json,yaml}/"]

[feature.tasks-build.tasks.build-js-lib]
cmd = "yarn build:lib"
depends-on = ["build-yarn", "build-schema-ts"]
inputs = ["node_modules/.yarn-state.yml", "js/src", "js/{package,tsconfig}.json"]
outputs = ["js/lib", "js/lib/index.js", "js/tsconfig.tsbuildinfo"]

[feature.tasks-build.tasks.build-js-app]
cmd = "yarn build:app"
depends-on = ["build-js-lib", "build-js-demo"]
inputs = ["node_modules/.yarn-state.yml", "js/{lib,demo}/**", "js/webpack.config.mjs"]
outputs = ["js/dist"]

[feature.tasks-build.tasks.build-py-static]
cmd = "pixi r py-static--"
depends-on = ["build-js-app"]
inputs = ["js/{dist,schema,lib}/**"]
outputs = ["src/urljsf/_static", "!**/demo/"]

[feature.tasks-build.tasks.dist-npm]
cmd = "mkdir -p dist && cd dist && npm pack ../js"
depends-on = ["build-js-app"]
inputs = ["node_modules/.yarn-state.yml", "js/{dist,LICENSE,README.md,package.json}"]
outputs = ["dist/*.tgz"]

[feature.tasks-build.tasks.dist-pypi]
cmd = "pyproject-build . --no-isolation"
depends-on = ["build-py-static", "build-schema-py"]
inputs = ["{pyproject.toml,LICENSE,README.md}", "src", "!**/__pycache__"]
outputs = ["dist/*.whl", "dist/*.tar.gz"]

[feature.tasks-build.tasks.dist-hash]
cmd = """
rm -rf dist/SHA256SUMS
&& python -c 'from hashlib import sha256; from pathlib import Path; [
  print(f"{sha256(p.read_bytes()).hexdigest()}  {p.name}")
  for p in sorted(Path("dist").glob("*"))
  if p.name != "SHA256SUMS"
]'
> dist/SHA256SUMS
&& cat dist/SHA256SUMS
&& ls -hs dist
"""
depends-on = ["dist-pypi", "dist-npm"]
inputs = ["dist", "!dist/SHA256SUMS"]
outputs = ["dist/SHA256SUMS"]

[feature.tasks-build.tasks.build-schema-props]
cmd = "export $(pixi r schema-vars--) && pixi r schema-ts-json--"
inputs = ["js/src/_props.ts", "scripts/schema.py"]
outputs = ["js/schema/v0/props.schema.json"]

[feature.tasks-build.tasks.build-schema-json]
cmd = "export $(pixi r schema-vars--) && pixi r schema-toml-json--"
inputs = [
  "js/schema/form.schema.toml",
  "js/schema/v0/props.schema.json",
  "scripts/schema.py",
]
outputs = ["js/schema/v0/form.schema.json"]
depends-on = ["build-yarn"]

[feature.tasks-build.tasks.build-schema-ts]
cmd = "export $(pixi r schema-vars--) && pixi r schema-json-ts--"
inputs = ["js/schema/v0/form.schema.json", "scripts/schema.py"]
outputs = ["js/src/_schema.ts"]
depends-on = ["build-schema-json"]

[feature.tasks-build.tasks.build-schema-py]
cmd = "export $(pixi r schema-vars--) && pixi r schema-json-py--"
inputs = ["js/schema/v0", "scripts/schema.py", "scripts/jsonschema-gentypes.yaml"]
outputs = ["src/urljsf/_schema.py"]
depends-on = ["build-schema-json"]

# fix ##########################################################################
[feature.tasks-lint.tasks.fix-toml-taplo]
cmd = """
  taplo fmt
    --option=array_auto_collapse=false
    --option=array_auto_expand=true
    --option=compact_inline_tables=true
    --option=column_width=88
    --option=indent_string="  "
    *.toml
    js/demo/toml/*.toml
    js/schema/*.toml
    tests/fixtures/*/*/*/*.toml
    """
inputs = ["*.toml", "{docs,js,src,tests}/**/*.toml"]

[feature.tasks-lint.tasks.fix-js-prettier]
cmd = "pixi r prettier-- --write"
depends-on = ["build-yarn"]
inputs = [
  "*.{yml,json,md}",
  "{docs,tests,src,js,.github}/**/*.{md,json,yml,yaml,css,ts,tsx,ts,mjs}",
  "!src/**/_static",
]
[feature.tasks-lint.tasks.fix-js-markdownlint]
cmd = "pixi r markdownlint-- --fix"
depends-on = ["build-yarn"]
inputs = ["*.{md,json}", "{docs,tests,src,js,.github}/**/*.md", "!src/**/_static"]

[feature.tasks-lint.tasks.fix-js-dedupe]
cmd = "yarn yarn-berry-deduplicate --fail --strategy fewer"
depends-on = ["build-yarn"]
inputs = ["node_modules/.yarn-state.yml", "package.json"]
outputs = ["yarn.lock"]

[feature.tasks-lint.tasks.fix-py-ruff]
cmd = "ruff format && ruff check --fix-only"
inputs = ["pyproject.toml", "{src,tests,docs,scripts}/**/*.py"]

# lint #########################################################################
[feature.tasks-lint.tasks.lint-actionlint]
cmd = "actionlint -shellcheck=shellcheck -pyflakes=pyflakes"
inputs = [".github/workflows"]

[feature.tasks-lint.tasks.lint-py-ruff]
cmd = "ruff format --check && ruff check"
inputs = ["pyproject.toml", "{src,tests,docs,scripts}/**/*.py"]

[feature.tasks-lint.tasks.lint-py-mypy]
cmd = "mypy -p urljsf"
inputs = ["pyproject.toml", "{src,tests}/**/*.py"]
depends-on = ["lint-pip"]

[feature.tasks-lint.tasks.lint-js-prettier]
cmd = "pixi r prettier--"
depends-on = ["build-yarn"]
inputs = [
  "*.{yml,json,md}",
  "{docs,tests,src,js,.github}/**/*.{md,json,yml,yaml,css,ts,tsx,ts,mjs}",
  "!src/**/_static",
]

[feature.tasks-lint.tasks.lint-js-markdownlint]
cmd = "pixi r markdownlint--"
depends-on = ["build-yarn"]
inputs = ["*.{md,json}", "{docs,tests,src,js,.github}/**/*.md", "!src/**/_static"]

# test #########################################################################
[feature.tasks-test.tasks.test-pytest]
cmd = """
export PIXI_PLATFORM=$(cat build/platform.txt)
&& export COVERAGE_FILE=build/reports/test_pytest_$PIXI_PLATFORM.coverage
&& pytest
  -n auto
  --html=build/reports/test_pytest_$PIXI_PLATFORM.html
  --self-contained-html
  --cov-report=html:build/reports/test_pytest_htmlcov-$PIXI_PLATFORM/
  --cov-report=term-missing:skip-covered
  --cov=urljsf
  --cov-branch
  --cov-context=test
  --no-cov-on-fail
  --cov-fail-under=99
"""
depends-on = ["test-pip", "build-py-static", "platform--"]
inputs = ["{tests,src/urljsf}/**/*.{py,rst,json}", "src/urljsf/{_static,_templates}"]
outputs = ["build/reports/test_*"]

[feature.tasks-test.tasks.test-report]
cmd = "python scripts/report.py build/reports"

# test-oldest ##################################################################
[feature.tasks-test-oldest.tasks.test-oldest-pytest]
cmd = """
export PIXI_PLATFORM=$(cat build/platform.txt)
&& pytest
  -n auto
  --html=build/reports/test-oldest_pytest_$PIXI_PLATFORM.html
  --self-contained-html
"""
depends-on = ["test-min-pip", "build-py-static", "platform--"]
inputs = ["{tests,src/urljsf}/**/*.{py,rst,json}", "src/urljsf/{_static,_templates}"]
outputs = ["build/reports/test-oldest_*"]

# docs #########################################################################
[feature.tasks-docs.tasks.docs-scour]
cmd = """
export SCOUR_ARGS="scour --enable-id-stripping --enable-comment-stripping"
&& cd docs/_static
&& $SCOUR_ARGS logo-inkscape.svg logo.svg
&& $SCOUR_ARGS icon-inkscape.svg icon.svg
"""
inputs = ["docs/_static/*-inkscape.svg"]
outputs = ["docs/_static/*.svg", "!*inkscape.svg"]

[feature.tasks-docs.tasks.docs-sphinx]
inputs = [
  "*.md",
  "*.toml",
  "src/**/*.py",
  "dist/*.whl",
  "docs/**/*.{css,ipynb,md,py}",
  "!**/.ipynb_checkpoints",
]
depends-on = ["docs-pip", "docs-scour"]
outputs = ["build/docs"]
cmd = """
  export PYDEVD_DISABLE_FILE_VALIDATION=1
  && sphinx-build -W --keep-going --color -b html docs build/docs
"""

# watch ########################################################################
[feature.tasks-build.tasks.watch-js-lib]
cmd = "yarn build:lib --watch --preserveWatchOutput"
depends-on = ["build-yarn"]

[feature.tasks-build.tasks.watch-js-demo]
cmd = """
watchfiles "python scripts/demo.py" scripts/demo.py js/demo/toml
"""

[feature.tasks-build.tasks.watch-js-app]
cmd = "yarn build:app --watch"
depends-on = ["build-yarn"]

[feature.tasks-build.tasks.watch-py-static]
cmd = """
watchfiles "pixi r py-static--" js/dist
"""

[feature.tasks-build.tasks.watch-schema]
cmd = """
export $(pixi r schema-vars--)
&& watchfiles "pixi r schema-all--" $SCHEMA_TOML $PROPS_TS scripts/schema.py
"""

[feature.tasks-build.tasks.serve-demo]
cmd = """
cd js/dist
&& python -m http.server -b 127.0.0.1 8100
"""

[feature.tasks-docs.tasks.serve-docs]
cmd = """
rm -rf build/docs
&& pixi r docs-sphinx
&& cd build/docs
&& python -m http.server -b 127.0.0.1 8101
"""

[feature.tasks-docs.tasks.watch-docs]
depends-on = ["docs-pip"]
cmd = """
rm -rf build/watch-docs
&& sphinx-autobuild docs build/watch-docs
  --write-all
  --jobs 8
  --color
  --watch src
  --watch pixi.toml
  --watch js/dist
"""

[feature.tasks-dev.tasks.watch]
cmd = "python scripts/watch.py"

# envs #########################################################################
[environments]
build = ["deps-build", "tasks-build", "deps-pip"]
test = ["deps-test", "deps-run", "deps-pip", "tasks-test"]
test-oldest = [
  "deps-pip",
  "deps-test",
  "deps-run",
  "deps-run-oldest",
  "tasks-test-oldest",
]
lint = ["deps-pip", "deps-build", "deps-lint", "deps-run", "tasks-lint"]
docs = ["deps-pip", "deps-docs", "deps-run", "deps-build", "tasks-docs"]
dev = ["deps-pip", "deps-build", "deps-test", "deps-docs", "deps-lint", "tasks-dev"]

# deps #########################################################################
[feature.deps-pip.dependencies]
pip = "*"
flit = ">=3.9.0,<4.0.0a0"

[feature.deps-run.dependencies]
sphinx = ">=6.1"
python = ">=3.9"
jsonschema = ">=4.18"

[feature.deps-run-oldest.dependencies]
python = "3.9.*"
sphinx = "6.1.*"
typing_extensions = "4.0.0"

[feature.deps-test.dependencies]
pytest = ">=8"
pytest-cov = "*"
pytest-html = "*"
pytest-xdist = "*"
coverage = ">=7"
"ruamel.yaml" = "*"
pytest-console-scripts = "*"

[feature.deps-docs.dependencies]
myst-nb = "*"
pydata-sphinx-theme = ">=0.16.0,<0.17.0"
scour = "*"
sphinx-argparse = "*"
sphinx-autobuild = "*"
sphinx-autodoc-typehints = "*"
sphinx-copybutton = "*"
sphinx-jsonschema = "*"
pypandoc = "*"
requests-cache = "*"

[feature.deps-build.dependencies]
jsonschema-gentypes = "*"
nodejs = "22.*"
python-build = "*"
"ruamel.yaml" = "*"
ruff = "*"
watchfiles = "*"
yarn = "3.6.4"

[feature.deps-lint.dependencies]
ruff = "*"
mypy = "*"
taplo = "*"
actionlint-with-all = "*"
types-jinja2 = "*"
types-docutils = "*"
types-jsonschema = "*"

# tools ########################################################################
[tool.sphinx]
author = "{{ ppt.project.authors[0].name }}"
project = "{{ ppt.project.name }}"
copyright = "2024, {{ ppt.project.authors[0].name }}"
release = "{{ ppt.project.version }}"
version = "{{ ppt.project.version }}"
extensions = [
  "sphinx.ext.autodoc",
  "sphinx_autodoc_typehints",
  "sphinx.ext.intersphinx",
  "sphinx.ext.viewcode",
  "myst_nb",
  "sphinx.ext.autosectionlabel",
  "sphinx_copybutton",
  "sphinxarg.ext",
  "sphinx-jsonschema",
  "urljsf.sphinxext",
]
suppress_warnings = ["autosectionlabel.*", "myst.xref_missing"]
exclude_patterns = ["rtd.rst"]
language = "en"

## autodoc
autoclass_content = "both"
always_document_param_types = true
typehints_defaults = "comma"
typehints_use_signature_return = true
autodoc_default_options = {members = true, show-inheritance = true, undoc-members = true}
autosectionlabel_prefix_document = true

## myst
myst_heading_anchors = 3

## theme
html_theme = "pydata_sphinx_theme"
html_logo = "_static/logo.svg"
html_favicon = "_static/icon.svg"
html_static_path = ["_static", "../js/dist/"]

[tool.sphinx.html_theme_options]
github_url = "{{ ppt.project.urls.Source }}"
icon_links = [
  {name = "GitHub", url = "{{ ppt.project.urls.Source }}", icon = "fa-brands fa-github", type = "fontawesome"},
  {name = "PyPI", url = "{{ ppt.project.urls.PyPI }}", icon = "fa-brands fa-python", type = "fontawesome"},
]
pygments_dark_style = "github-dark-colorblind"
pygments_light_style = "github-light-colorblind"

[tool.sphinx.jsonschema_options]
lift_description = true
auto_reference = true
auto_target = true
lift_definitions = true

## urljsf
[tool.sphinx.urljsf]
no_bootstrap = true

[tool.sphinx.urljsf.style]
--bs-body-bg = "var(--pst-color-background)"
--bs-body-color = "var(--pst-color-text-base)"
--bs-border-color = "var(--pst-color-border)"
--bs-card-bg = "var(--pst-color-surface)"
--bs-card-cap-bg = "var(--pst-color-danger-bg)"
--bs-danger-text-emphasis = "var(--pst-color-danger-highlight)"
--bs-secondary-color = "var(--pst-color-text-base)"
--bs-tertiary-bg = "var(--pst-color-on-background)"

[tool.sphinx.urljsf.style.".list-group"]
--bs-list-group-bg = "var(--pst-color-background)"
--bs-list-group-color = "var(--pst-color-text-base)"
--bs-list-group-border-color = "var(--pst-color-border)"

[tool.sphinx.urljsf.style."h1, h2, h3, h4, h5, h6"]
margin = "0"
