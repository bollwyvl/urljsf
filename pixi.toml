"$schema" = "https://pixi.sh/v0.30.0/schema/manifest/schema.json"

[project]
name = "prjsf"
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

# aliases ######################################################################
[tasks]
# "test", "docs", "check"
dev = {depends-on = ["fix", "lint", "build", "dist", "test", "docs"]}
fix = {depends-on = [
  "fix-toml-taplo",
  "fix-js-dedupe",
  "fix-js-markdownlint",
  "fix-js-prettier",
  "fix-py-ruff",
]}
lint = {depends-on = ["lint-py-ruff", "lint-js-prettier", "lint-js-markdownlint"]}
build = {depends-on = ["build-js-lib", "build-js-app", "build-py-static"]}
dist = {depends-on = ["dist-npm", "dist-pypi", "dist-hash"]}
test = {depends-on = ["test-pytest"]}
docs = {depends-on = ["docs-sphinx"]}

[tasks.prettier--]
cmd = """
yarn prettier
  --list-different
  --cache
  --cache-location build/.cache/prettier
  "*.{yml,json,md}"
  "{docs,tests,src,js,.github}/**/*.{md,json,yml,yaml,css,ts,tsx,ts,mjs}"
"""
[tasks.markdownlint--]
cmd = """
yarn markdownlint-cli2 "*.md" "{docs,tests,src,js,.github}/**/*.{md}"
"""
[tasks.pip-e--]
cmd = """
python -m pip install
  -vv
  -e .
  --no-deps
  --no-build-isolation
  --disable-pip-version-check
  --ignore-installed
"""
[tasks.py-static--]
cmd = """
rm -rf src/prjsf/_static/
&& cp -r js/dist/prjsf/ src/prjsf/_static/prjsf/
&& mkdir -p src/prjsf/_static/vendor/bootstrap/dist/css/
&& cp -r node_modules/bootstrap/LICENSE src/prjsf/_static/vendor/bootstrap/LICENSE
&& cp -r node_modules/bootstrap/dist/css/bootstrap.min.css src/prjsf/_static/vendor/bootstrap/dist/css/
&& rm -rf src/prjsf/_static/prjsf/demo/
"""

# tasks ########################################################################
[feature.tasks-build.tasks.setup-js]
cmd = "yarn"
inputs = ["{yarn.lock,package.json,.yarnrc.yml}", "js/package.json"]
outputs = ["node_modules/.yarn-state.yml"]

[feature.tasks-build.tasks.build-js-lib]
cmd = "yarn build:lib"
depends-on = ["setup-js"]
inputs = ["node_modules/.yarn-state.yml", "js/src", "js/{package,tsconfig}.json"]
outputs = ["js/lib"]

[feature.tasks-build.tasks.build-js-app]
cmd = "yarn build:app"
depends-on = ["build-js-lib"]
inputs = ["node_modules/.yarn-state.yml", "js/lib", "js/webpack.config.mjs"]
outputs = ["js/dist"]

[feature.tasks-build.tasks.watch-js-lib]
cmd = "yarn build:lib --watch"
depends-on = ["setup-js"]

[feature.tasks-build.tasks.watch-js-app]
cmd = "yarn build:app --watch"
depends-on = ["setup-js"]

[feature.tasks-build.tasks.build-py-static]
cmd = """pixi r py-static--"""
depends-on = ["build-js-app"]
inputs = ["js/dist"]
outputs = ["src/prjsf/_static", "!**/demo/"]

[feature.tasks-build.tasks.watch-py-static]
cmd = """
watchfiles "pixi r py-static--" js/dist
"""

[feature.tasks-build.tasks.dist-npm]
cmd = "mkdir -p dist && cd dist && npm pack ../js"
depends-on = ["build-js-app"]
inputs = ["node_modules/.yarn-state.yml", "js/{dist,LICENSE,README.md,package.json}"]
outputs = ["dist/*.tgz"]

[feature.tasks-build.tasks.dist-pypi]
cmd = "pyproject-build . --no-isolation"
depends-on = ["build-py-static"]
inputs = ["{pyproject.toml,LICENSE,README.md}", "src"]
outputs = ["dist/*.whl", "dist/*.tar.gz"]

[feature.tasks-build.tasks.dist-hash]
cmd = """
rm -rf dist/SHA256SUMS
&& python -c 'from hashlib import sha256; from pathlib import Path; [
  print(f"{sha256(p.read_bytes()).hexdigest()}  {p.name}")
  for p in sorted(Path("dist").glob("*"))
  if p.name != "SHA256SUMS"
]'
> dist/SHA256SUMS
&& cat dist/SHA256SUMS
&& ls -hs dist
"""
depends-on = ["dist-pypi", "dist-npm"]
inputs = ["dist", "!dist/SHA256SUMS"]
outputs = ["dist/SHA256SUMS"]

[feature.tasks-lint.tasks.fix-py-ruff]
cmd = "ruff format && ruff check --fix-only"
inputs = ["pyproject.toml", "{src,tests,docs}/**/*.py"]

[feature.tasks-lint.tasks.lint-py-ruff]
cmd = "ruff format --check && ruff check"
inputs = ["pyproject.toml", "{src,tests,docs}/**/*.py"]

[feature.tasks-lint.tasks.fix-js-prettier]
cmd = "pixi r prettier-- --write"
depends-on = ["setup-js"]
inputs = [
  "*.{yml,json,md}",
  "{docs,tests,src,js,.github}/**/*.{md,json,yml,yaml,css,ts,tsx,ts,mjs}",
  "!src/**/_static",
]

[feature.tasks-lint.tasks.lint-js-prettier]
cmd = "pixi r prettier--"
depends-on = ["setup-js"]
inputs = [
  "*.{yml,json,md}",
  "{docs,tests,src,js,.github}/**/*.{md,json,yml,yaml,css,ts,tsx,ts,mjs}",
  "!src/**/_static",
]

[feature.tasks-lint.tasks.lint-js-markdownlint]
cmd = "pixi r markdownlint--"
depends-on = ["setup-js"]
inputs = [
  "*.{md,json}",
  "{docs,tests,src,js,.github}/**/*.{md}",
  "!src/**/_static",
]
[feature.tasks-lint.tasks.fix-js-markdownlint]
cmd = "pixi r markdownlint-- --fix"
depends-on = ["setup-js"]
inputs = [
  "*.{md,json}",
  "{docs,tests,src,js,.github}/**/*.{md}",
  "!src/**/_static",
]

[feature.tasks-lint.tasks.fix-js-dedupe]
cmd = "yarn yarn-berry-deduplicate --fail --strategy fewer"
depends-on = ["setup-js"]
inputs = ["node_modules/.yarn-state.yml", "package.json"]
outputs = ["yarn.lock"]

[feature.tasks-lint.tasks.fix-toml-taplo]
cmd = """
  taplo fmt
    --option=array_auto_collapse=false
    --option=array_auto_expand=true
    --option=compact_inline_tables=true
    --option=column_width=88
    --option=indent_string="  "
    *.toml"""
inputs = ["*.toml"]

[feature.tasks-dev.tasks.test-pip]
cmd = """pixi r -e test pip-e--"""
inputs = ["pyproject.toml"]

[feature.tasks-test.tasks.test-pytest]
cmd = """
pytest
  -n auto
  --html=build/reports/pytest.html
  --self-contained-html
  --cov-report=html:build/reports/htmlcov
  --cov-report=term-missing:skip-covered
  --cov=prjsf
  --cov-branch
  --cov-context=test
  --no-cov-on-fail
  --cov-fail-under=98
"""
depends-on = ["test-pip", "build-py-static"]
inputs = ["{tests,src/prjsf}/**/*.py", "src/prjsf/{_static,_templates}"]

[feature.tasks-dev.tasks.dev-pip]
cmd = """pixi r -e dev pip-e--"""
inputs = ["pyproject.toml"]

[feature.tasks-docs.tasks.docs-pip]
cmd = """pixi r -e docs pip-e--"""
inputs = ["pyproject.toml"]

[feature.tasks-docs.tasks.docs-scour]
cmd = """
export SCOUR_ARGS="scour --enable-id-stripping --enable-comment-stripping"
&& cd docs/_static
&& $SCOUR_ARGS logo-inkscape.svg logo.svg
&& $SCOUR_ARGS icon-inkscape.svg icon.svg
"""
inputs = ["docs/_static/*-inkscape.svg"]
outputs = ["docs/_static/*.svg", "!*inkscape.svg"]

[feature.tasks-docs.tasks.docs-sphinx]
inputs = [
  "*.md",
  "*.toml",
  "src/**/*.py",
  "dist/*.whl",
  "docs/**/*.{css,ipynb,md,py}",
  "!**/.ipynb_checkpoints",
]
depends-on = ["docs-pip", "docs-scour"]
outputs = ["build/docs"]
cmd = """
  export PYDEVD_DISABLE_FILE_VALIDATION=1
  && sphinx-build -W --keep-going --color -b html docs build/docs
"""

[feature.tasks-docs.tasks.docs-watch]
depends-on = ["docs-pip"]
cmd = """
rm -rf build/watch-docs
&& sphinx-autobuild docs build/watch-docs
  --write-all
  --jobs 8
  --color
  --watch src
"""

# envs #########################################################################
[environments]
build = ["deps-build", "tasks-build", "deps-pip"]
test = ["deps-test", "deps-run", "deps-pip", "tasks-test"]
test-oldest = ["deps-pip", "deps-test", "deps-run", "deps-run-oldest"]
lint = ["deps-build", "deps-lint", "tasks-lint"]
docs = ["deps-docs", "deps-run", "deps-build", "deps-pip", "tasks-docs"]
dev = ["deps-build", "deps-test", "deps-docs", "deps-lint", "deps-pip", "tasks-dev"]

# deps #########################################################################
[feature.deps-run.dependencies]
sphinx = ">=6.1"
python = ">=3.9"

[feature.deps-run-oldest.dependencies]
sphinx = "6.1.*"
python = "3.9.*"

[feature.deps-test.dependencies]
pytest = ">=8"
pytest-cov = "*"
pytest-html = "*"
pytest-xdist = "*"
coverage = ">=7"
pytest-console-scripts = "*"

[feature.deps-docs.dependencies]
pydata-sphinx-theme = ">=0.15.4,<0.16.0a0"
myst-nb = "*"
sphinx-autodoc-typehints = "*"
sphinx-copybutton = "*"
sphinx-autobuild = "*"
sphinx-argparse = "*"
scour = "*"

[feature.deps-build.dependencies]
nodejs = "22.*"
yarn = "3.6.4"
python-build = "*"
watchfiles = "*"

[feature.deps-lint.dependencies]
ruff = "*"
mypy = "*"
taplo = "*"

[feature.deps-pip.dependencies]
pip = "*"
flit = ">=3.9.0,<4.0.0a0"

# tools ########################################################################
[tool.sphinx]
author = "{{ ppt.project.authors[0].name }}"
project = "{{ ppt.project.name }}"
copyright = "2024, {{ ppt.project.authors[0].name }}"
release = "{{ ppt.project.version }}"
version = "{{ ppt.project.version }}"
extensions = [
  "sphinx.ext.autodoc",
  "sphinx_autodoc_typehints",
  "sphinx.ext.intersphinx",
  "sphinx.ext.viewcode",
  "myst_nb",
  "sphinx.ext.autosectionlabel",
  "sphinx_copybutton",
  "sphinxarg.ext",
  "prjsf.sphinxext",
]
suppress_warnings = ["autosectionlabel.*"]
exclude_patterns = ["rtd.rst"]
language = "en"

## autodoc
autoclass_content = "both"
always_document_param_types = true
typehints_defaults = "comma"
typehints_use_signature_return = true
autodoc_default_options = {members = true, show-inheritance = true, undoc-members = true}
autosectionlabel_prefix_document = true

## myst
myst_heading_anchors = 3

## theme
html_theme = "pydata_sphinx_theme"
html_logo = "_static/logo.svg"
html_favicon = "_static/icon.svg"

html_theme_options.icon_links = [
  {name = "GitHub", url = "{{ ppt.project.urls.Source }}", icon = "fa-brands fa-github", type = "fontawesome"},
  {name = "PyPI", url = "{{ ppt.project.urls.PyPI }}", icon = "fa-brands fa-python", type = "fontawesome"},
]

## prjsf
prjsf.github_repo = "deathbeds/prjsf"

[tool.sphinx.prjsf.css.variables]
bs-card-bg = "pst-color-surface"
bs-danger-text-emphasis = "pst-color-danger-highlight"
bs-list-group-bg = "pst-color-background"
bs-body-color = "pst-color-text-base"
bs-list-group-color = "pst-color-text-base"
bs-card-cap-bg = "pst-color-danger-bg"
bs-secondary-color = "pst-color-text-base"
