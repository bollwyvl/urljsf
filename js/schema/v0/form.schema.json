{
  "$id": "https://deathbeds.github.io/urljsf/_static/schema/v0/form.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "urljsf",
  "description": "A schema for building forms for building URLs for building...",
  "properties": {
    "$id": {
      "type": "string",
      "format": "uri-reference"
    },
    "$schema": {
      "type": "string",
      "format": "uri-reference"
    },
    "css_variables": {
      "$ref": "#/definitions/css-variables",
      "description": "CSS variables, scoped to this form or specific selectors\n"
    },
    "forms": {
      "$ref": "#/definitions/forms",
      "description": "forms that describe how to build the URL\n"
    },
    "iframe": {
      "type": "boolean",
      "description": "isolate each form on the page in an `iframe`"
    },
    "iframe_style": {
      "type": "string",
      "description": "additional simple CSS to apply to an `iframe` element (implies `iframe`)\n"
    },
    "no_bootstrap": {
      "type": "boolean",
      "description": "don't try to add a link to bootstrap if missing.",
      "default": false
    },
    "templates": {
      "$ref": "#/definitions/templates",
      "description": "`nunjucks` templates that control URLs for machines and markdown for humans\n"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "any-css": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object"
        }
      ]
    },
    "any-file-format": {
      "type": "string",
      "title": "File Format",
      "description": "a format that can be serialized or deserialized",
      "enum": ["json", "toml", "yaml"]
    },
    "any-object": {
      "type": "object",
      "title": "An Inline Object",
      "description": "An line object"
    },
    "any-schema": {
      "title": "A Schema",
      "oneOf": [
        {
          "$ref": "#/definitions/any-schema-location",
          "title": "Schema By URL"
        },
        {
          "$ref": "#/definitions/any-object",
          "title": "Inline Object"
        }
      ]
    },
    "any-schema-location": {
      "type": "string",
      "description": "a path to a JSON schema, serialized as JSON, TOML, or (simple) YAML.",
      "format": "uri-reference",
      "minLength": 1
    },
    "any-template": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        }
      ]
    },
    "checks": {
      "type": "object",
      "description": "`nunjucks` templates keyed by their label: any evaluating to a non-whitespace\nstring will be considered failing.",
      "additionalProperties": {
        "$ref": "#/definitions/any-template"
      }
    },
    "css-variables": {
      "type": "object",
      "patternProperties": {
        "^.*$": {
          "$ref": "#/definitions/any-css"
        }
      }
    },
    "file-form": {
      "type": "object",
      "title": "File Form",
      "description": "a description of a form that builds a data file",
      "properties": {
        "form_data": {
          "$ref": "#/definitions/any-schema",
          "descripton": "JSON-compatible initial data for file contents\n"
        },
        "format": {
          "$ref": "#/definitions/any-file-format"
        },
        "props": {
          "$ref": "./props.schema.json#/definitions/Props",
          "descripton": "JSON-compatible subset of configuration properties for file contents\n"
        },
        "prune_empty": {
          "type": "boolean",
          "description": "prune empty lists, object, etc."
        },
        "schema": {
          "$ref": "#/definitions/any-schema",
          "descripton": "URL for a JSON schema to describe file contents: features not present in Draft 7\nare best-effort.\n"
        },
        "ui_schema": {
          "$ref": "#/definitions/any-schema",
          "descripton": "URL for an `rjsf` UI schema to describe the file fields.\n"
        }
      },
      "additionalProperties": false,
      "required": ["schema", "format"]
    },
    "forms": {
      "type": "object",
      "description": "forms used to build and populate a URL",
      "properties": {
        "file": {
          "$ref": "#/definitions/file-form",
          "description": "control the inputs to a JSON, TOML, or YAML file"
        },
        "url": {
          "$ref": "#/definitions/url-form",
          "description": "control the inputs to a valid URL"
        }
      },
      "required": ["url"]
    },
    "templates": {
      "type": "object",
      "description": "[`nunjucks`][nunjucks] strings (or lists of strings) that control how strings are built\nfrom forms.\n\nThe [jinja compatibility layer][jinjacompat] is enabled, allowing for more expressive,\npython-like syntax. Some addition filters are included:\n\n- `base64` turns a string into its [Base64]-encoded alternative\n\n[nunjucks]: https://mozilla.github.io/nunjucks/templating.html\n[jinjacompat]: https://mozilla.github.io/nunjucks/api.html#installjinjacompat\n[Base64]: https://developer.mozilla.org/en-US/docs/Glossary/Base64",
      "properties": {
        "checks": {
          "$ref": "#/definitions/checks",
          "description": "markdown templates, which if rendered to _any_ non-whitespace, will be treated as\nan error, preventing the submit button from being shown.\n"
        },
        "submit_button": {
          "$ref": "#/definitions/any-template",
          "description": "text to show on the button when a form is valid. multiple lines will be joined\nwith `\\n`, then leading and trailing whitespace will be trimmed.\n"
        },
        "url": {
          "$ref": "#/definitions/any-template",
          "description": "the URL to build. all whitespace will be trimmed, then joined with no delimiter.\n"
        }
      },
      "required": ["url", "submit_button"]
    },
    "url-form": {
      "type": "object",
      "title": "URL Form",
      "description": "a definition of a form to build a URL",
      "properties": {
        "form_data": {
          "$ref": "#/definitions/any-schema",
          "descripton": "JSON-compatible initial data for URL fields\n"
        },
        "props": {
          "$ref": "./props.schema.json#/definitions/Props",
          "descripton": "JSON-compatible subset of configuration properties for URL fields\n"
        },
        "schema": {
          "$ref": "#/definitions/any-schema",
          "descripton": "URL for a JSON schema to describe the URL fields: features not present in\nDraft 7 are best-effort.\n"
        },
        "ui_schema": {
          "$ref": "#/definitions/any-schema",
          "descripton": "URL for an `rjsf` UI schema to describe the URL fields\n"
        }
      },
      "additionalProperties": false
    }
  },
  "required": ["forms", "templates"]
}
