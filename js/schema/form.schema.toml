#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░  #
# ░░  ░░░░  ░░       ░░░  ░░░░░░░░        ░░░      ░░░        ░░░░░░░      ░░░ #
# ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒▒▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒ #
# ▓▓  ▓▓▓▓  ▓▓       ▓▓▓  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓      ▓▓▓      ▓▓▓▓▓▓▓▓  ▓  ▓  ▓▓ #
# ██  ████  ██  ███  ███  ████████  ████  ████████  ██  ████████████  ████  ██ #
# ███      ███  ████  ██        ███      ████      ███  █████████████      ███ #
#  ▒▓██████████████████████████████████████████████████████████████████████▓▒  #

title = "urljsf"
description = "A schema for building forms for building URLs for building..."

"$schema" = "http://json-schema.org/draft-07/schema#"
"$id" = "https://deathbeds.github.io/urljsf/_static/schema/v0/form.schema.json"
type = "object"
required = ["forms", "templates"]
additionalProperties = false

[properties]
forms = {"$ref" = "#/definitions/forms", description = """
forms that describe how to build the URL
"""}
templates = {"$ref" = "#/definitions/templates", description = """
`nunjucks` templates that control URLs for machines and markdown for humans
"""}

[properties.iframe]
description = "isolate each form on the page in an `iframe`"
type = "boolean"

[properties.iframe_style]
description = """
additional simple CSS to apply to an `iframe` element (implies `iframe`)
"""
type = "string"

# forms ########################################################################
[definitions.forms]
type = "object"
required = ["url", "file"]
description = "forms used to build and populate a URL"

[definitions.forms.properties.url]
description = "control the inputs to a valid URL"
"$ref" = "#/definitions/url-form"

[definitions.forms.properties.file]
description = "control the inputs to a JSON, TOML, or YAML file"
"$ref" = "#/definitions/file-form"

# templates ####################################################################
[definitions.templates]
type = "object"
required = ["url", "submit_button"]
description = """
[`nunjucks`][nunjucks] strings (or lists of strings) that control how strings are built
from forms.

The [jinja compatibility layer][jinjacompat] is enabled, allowing for more expressive,
python-like syntax. Some addition filters are included:

- `base64` turns a string into its [Base64]-encoded alternative

[nunjucks]: https://mozilla.github.io/nunjucks/templating.html
[jinjacompat]: https://mozilla.github.io/nunjucks/api.html#installjinjacompat
[Base64]: https://developer.mozilla.org/en-US/docs/Glossary/Base64
"""

[definitions.templates.properties]
url = {"$ref" = "#/definitions/any-template", description = """
the URL to build. all whitespace will be trimmed, then joined with no delimiter.
"""}
submit_button = {"$ref" = "#/definitions/any-template", description = """
text to show on the button when a form is valid. multiple lines will be joined
with `\\n`, then leading and trailing whitespace will be trimmed.
"""}
checks = {"$ref" = "#/definitions/checks", description = """
markdown templates, which if rendered to _any_ non-whitespace, will be treated as
an error, preventing the submit button from being shown.
"""}

# url form #####################################################################
[definitions.url-form]
title = "URL Form"
description = "a definition of a form to build a URL"
type = "object"
required = ["url_template"]
additionalProperties = false

[definitions.url-form.properties]
schema = {"$ref" = "#/definitions/any-schema-location", descripton = """
URL for a JSON schema to describe the URL fields: features not present in
Draft 7 are best-effort.
"""}
ui_schema = {"$ref" = "#/definitions/any-schema-location", descripton = """
URL for an `rjsf` UI schema to describe the URL fields
"""}
form_data = {"$ref" = "#/definitions/any-schema-location", descripton = """
JSON-compatible initial data for URL fields
"""}
props = {"$ref" = "./props.schema.json#/definitions/Props", descripton = """
JSON-compatible subset of configuration properties for URL fields
"""}

# file form ####################################################################
[definitions.file-form]
title = "File Form"
description = "a description of a form that builds a data file"
type = "object"
required = ["schema", "format"]
additionalProperties = false

[definitions.file-form.properties]
format = {"$ref" = "#/definitions/any-file-format"}
schema = {"$ref" = "#/definitions/any-schema-location", descripton = """
URL for a JSON schema to describe file contents: features not present in Draft 7
are best-effort.
"""}
ui_schema = {"$ref" = "#/definitions/any-schema-location", descripton = """
URL for an `rjsf` UI schema to describe the file fields.
"""}
form_data = {"$ref" = "#/definitions/any-schema-location", descripton = """
JSON-compatible initial data for file contents
"""}
props = {"$ref" = "./props.schema.json#/definitions/Props", descripton = """
JSON-compatible subset of configuration properties for file contents
"""}

[definitions.file-form.properties.prune_empty]
description = "prune empty lists, object, etc."
type = "boolean"

# other ########################################################################
[definitions.any-file-format]
title = "File Format"
type = "string"
description = "a format that can be serialized or deserialized"
enum = ["json", "toml", "yaml"]

# templating ###################################################################
[definitions.checks]
type = "object"
description = """
`nunjucks` templates keyed by their label: any evaluating to a non-whitespace
string will be considered failing.
"""
additionalProperties = {"$ref" = "#/definitions/any-template"}

[definitions.any-schema-location]
title = "A Schema Location"
type = "string"
format = "uri-reference"
minLength = 1
description = """
a path to a JSON schema, serialized as JSON, TOML, or (simple) YAML.
"""

[definitions.any-template]
anyOf = [
  {type = "string"},
  {type = "array", items = {type = "string"}, minItems = 1},
]
